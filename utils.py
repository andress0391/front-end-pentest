#!/usr/bin/python3
# -*- encoding: utf-8 -*-

def obtenerSubs(eleccion):
    subcatDict = {2:'config', 3:'ident', 4:'authn', 5:'authz', 6:'sess', 7:'inpval', 8:'err', 9:'crypst', 10:'buslogic', 11:'client'}
    resultado = ""
    for i in eleccion:
        for k,v in subcatDict.items():
            if str(k) == i:
                resultado += v + ","
    resultado = resultado[:-1]
    return resultado

def obtenerRiesgoSub(pregunta_sub):
    riesgo = 0.0
    for i in pregunta_sub:
        for k,v in i.items():
            riesgo += int(v)
    riesgo /= 4
    return riesgo

def obtenerRiesgoComando(riesgoNegocio):
    cadena = ""
    for k,v in riesgoNegocio.items():
        cadena += str(k) + ":" + str(v) + ","
    cadena = cadena[:-1]

    return cadena

def validarRiesgoNegocio(preguntas, subcat):
    # Asegurar que las preguntas de cada subcategor√≠a sean contestadas.
    subcatList = subcat.split(',')
    lenPreguntas = len(preguntas)

    if ( lenPreguntas % 4 != 0 ) and ( lenPreguntas % (len(subcatList) + 1) == 0 ):
        return None
    
    resultado = list()
    split = 4
    resultado = [preguntas[i:i+split] for i  in range(0, len(preguntas), split)]
    
    lenPreguntas = len(resultado)
    riesgosNegocio = dict()
    i = 0
    while i < lenPreguntas:
        if i == 0:
            riesgosNegocio.update({"info":obtenerRiesgoSub(resultado[i])})
        else:
            riesgosNegocio.update({subcatList[i-1]:obtenerRiesgoSub(resultado[i])})
        i += 1
    
    return riesgosNegocio

def obtenerRiesgosSubcategoria(consulta):
    info = [0,0,0,0,-1]
    config = [0,0,0,0,-1]
    ident = [0,0,0,0,-1]
    authn = [0,0,0,0,-1]
    authz = [0,0,0,0,-1]
    sess = [0,0,0,0,-1]
    inpval = [0,0,0,0,-1]
    err = [0,0,0,0,-1]
    crypst = [0,0,0,0,-1]
    buslogic = [0,0,0,0,-1]
    client = [0,0,0,0,-1]

    for i in consulta:
        if i[2] == 1:
            info = [0,0,0,0, 1]
        elif i[2] == 2:
            config = [0,0,0,0, 2]
        elif i[2] == 3:
            ident = [0,0,0,0, 3]
        elif i[2] == 4:
            authn = [0,0,0,0, 4]
        elif i[2] == 5:
            authz = [0,0,0,0, 5]
        elif i[2] == 6:
            sess = [0,0,0,0, 6]
        elif i[2] == 7:
            inpval = [0,0,0,0, 7]
        elif i[2] == 8:
            err = [0,0,0,0, 8]
        elif i[2] == 9:
            crypst = [0,0,0,0, 9]
        elif i[2] == 10:
            buslogic = [0,0,0,0, 10]
        else:
            client = [0,0,0,0, 11]

    for i in consulta:
        if i[2] == 1:
            info = _agruparRiesgosSub(info, i[0], i[1])
        elif i[2] == 2:
            config = _agruparRiesgosSub(config, i[0], i[1])
        elif i[2] == 3:
            ident = _agruparRiesgosSub(ident, i[0], i[1])
        elif i[2] == 4:
            authn = _agruparRiesgosSub(authn, i[0], i[1])
        elif i[2] == 5:
            authz = _agruparRiesgosSub(authz, i[0], i[1])
        elif i[2] == 6:
            sess = _agruparRiesgosSub(sess, i[0], i[1])
        elif i[2] == 7:
            inpval = _agruparRiesgosSub(inpval, i[0], i[1])
        elif i[2] == 8:
            err = _agruparRiesgosSub(err, i[0], i[1])
        elif i[2] == 9:
            crypst = _agruparRiesgosSub(crypst, i[0], i[1])
        elif i[2] == 10:
            buslogic = _agruparRiesgosSub(buslogic, i[0], i[1])
        else:
            client = _agruparRiesgosSub(client, i[0], i[1])
    return [info, config, ident, authn, authz, sess, inpval, err, crypst, buslogic, client]

def _agruparRiesgosSub(sub, riesgoc, cantidad):
    cantidad_anterior = 0
    if riesgoc == 1:
        cantidad_anterior = sub[0] + cantidad
        sub[0] = cantidad_anterior
    elif riesgoc == 2:
        cantidad_anterior = sub[1] + cantidad
        sub[1] = cantidad_anterior
    elif riesgoc == 3:
        cantidad_anterior = sub[2] + cantidad
        sub[2] = cantidad_anterior
    
    return sub


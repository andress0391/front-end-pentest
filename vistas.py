#!/usr/bin/python3
# -*- encoding: utf-8 -*-

from pentestingWeb import app

from modelos import Detalle, Pentest, Prueba, Subcategoria
from modelos import crearPentest, eliminarPentest, db
from utils import obtenerRiesgoComando, obtenerRiesgoSub, obtenerSubs, validarRiesgoNegocio

from forms import PentestForm, UrlAuthnForm

from flask import render_template, request, redirect, url_for, make_response
from werkzeug.exceptions import HTTPException

from sqlalchemy import and_, or_, func

import datetime
import pdfkit

@app.errorhandler(400)
@app.errorhandler(401)
@app.errorhandler(403)
@app.errorhandler(404)
@app.errorhandler(405)
@app.errorhandler(500)
def page_not_found(error):
    return render_template("errors/404.html")

@app.route('/', methods = ['GET', 'POST'])
def index():
    # Validaci√≥n del formulario
    pentest_form = PentestForm(request.form)
    eleccion = list()
    if request.method == 'POST' and pentest_form.validate():
        for i in range(2,12):
            try:
                eleccion.append(request.form["name_" + str(i)])
            except HTTPException:
                pass
        #objPentest = Pentest(pentest_form.url_ip.data, pentest_form.nombre.data, datetime.datetime.now())
        objPentest = Pentest(pentest_form.url_ip.data, pentest_form.nombre.data)
        crearPentest(objPentest)
        return redirect("/pentest/1")
    else:
        return render_template('nuevoPentest.html', form=pentest_form)

@app.route("/pentest/<int:page_num>", methods=['GET', 'POST'])
def pentest(page_num):
    accion = None
    id_pentest = None

    if request.method == 'POST':
        try:
            tmp = request.form["accion"].split("_")
            accion = tmp[0]
            id_pentest = tmp[1]
        except HTTPException:
            pass
        
        if id_pentest != None and accion == "elim":
            eliminarPentest(id_pentest)

        elif id_pentest != None and accion == "pent":
            return redirect(url_for("pentest_subs", pentest_num=id_pentest))

        elif id_pentest != None and accion == "report":
            return redirect(url_for('report', pentest_num=id_pentest))

    pentests = Pentest.query.order_by(Pentest.id.desc()).paginate(per_page=6, page=page_num, error_out=True)
    return render_template("pentests.html", pentests=pentests)

@app.route("/pentest/<int:pentest_num>/subs", methods=['GET', 'POST'])
def pentest_subs(pentest_num):
    autenticacion_form = UrlAuthnForm(request.form)
    #pentest_form = PentestForm(request.form)
    subs = Subcategoria.query.order_by(Subcategoria.id).all()
    subs_pruebas = Prueba.query.join(Subcategoria, Prueba.id_subcategoria == Subcategoria.id).add_columns(Subcategoria.sub_nombre, Prueba.id_subcategoria, Prueba.codigo, Prueba.nombre, Prueba.descripcion).order_by(Subcategoria.id)

    eleccionSubcategorias = list()
    riesgoNegocio = list()
    tmp = None

    if request.method == 'POST':
        for i in range(2,12):
            try:
                eleccionSubcategorias.append(request.form["name_" + str(i)])
            except HTTPException:
                pass
        for i in range(1,12):
            for j in range(1,5):
                try:
                    tmp = request.form["pregunta" + str(j) + "_" + str(i)]
                    riesgoNegocio.append({"pregunta"+str(j)+"_"+str(i):tmp})
                except HTTPException:
                    pass
        
        subElecc = obtenerSubs(eleccionSubcategorias)
        riesgoNegocio = validarRiesgoNegocio(riesgoNegocio, subElecc)

        if riesgoNegocio != None:
            return render_template("eleccionSubcategorias.html", subcat=subs, pruebas=subs_pruebas, form=autenticacion_form)
        else:
            pentest = Pentest.query.add_columns(Pentest.url_ip).filter(Pentest.id==pentest_num)
            url_aut = request.form["url_ses"]
            user_aut = request.form["usuarioP"]
            pass_aut = request.form["passUsuarioP"]

            riesgoNegocio = obtenerRiesgoComando(riesgoNegocio)
            sshConexion = "ssh root@192.168.120.30 'cd pentesting; "
            mpiComando = "/home/rpimpi/mpi-install/bin/mpiexec -n 6 -f machinefile python3 MAIN_PRUEBA_rpi.py "
            banderas = "--url {} --login {} --usuario {},{} --pruebas {} --id_pentest {} --riesgos {}".format(pentest[0].url_ip, url_aut, user_aut, pass_aut, subElecc, str(pentest_num), riesgoNegocio)

            print("\n" + sshConexion + mpiComando + banderas + "\n")
            return "hola"

    return render_template("eleccionSubcategorias.html", subcat=subs, pruebas=subs_pruebas, form=autenticacion_form)

@app.route("/pentest/<int:pentest_num>/report", methods=['GET'])
def report(pentest_num):
    from time import time
    ini = time()
    # Consultas base de datos
    pentest_info = Pentest.query.add_columns(Pentest.url_ip, Pentest.fecha_ini, Pentest.fecha_fin).filter(Pentest.id==pentest_num)
    detalle_prueba = Detalle.query.join(Prueba, Detalle.id_prueba==Prueba.id).add_columns(Detalle.resultado, Prueba.nombre, Prueba.descripcion, Prueba.impacto, Prueba.codigo, Detalle.riesgo).filter(Detalle.id_pentest==pentest_num)

    cantidadBajos = Detalle.query.filter(and_(Detalle.riesgo >= 0), Detalle.riesgo < 3, Detalle.id_pentest == pentest_num).count()
    cantidadMedios = Detalle.query.filter(and_(Detalle.riesgo >= 3), Detalle.riesgo < 6, Detalle.id_pentest == pentest_num).count()
    cantidadAltos = Detalle.query.filter(and_(Detalle.riesgo >= 6), Detalle.riesgo < 9, Detalle.id_pentest == pentest_num).count()
    cantidadCiticos = Detalle.query.filter(and_(Detalle.riesgo >= 6), Detalle.riesgo < 9, Detalle.id_pentest == pentest_num).count()
    riesgosNum = [cantidadBajos, cantidadMedios, cantidadAltos, cantidadCiticos]

    subcategoriasDetalle = db.session.query(Prueba.id_subcategoria, func.count(Prueba.codigo).label("cantidadp")).join(Detalle, and_(Prueba.id==Detalle.id_prueba, Detalle.id_pentest==pentest_num)).group_by(Prueba.id_subcategoria)
    pruebasDetalle = db.session.query(Prueba.id_subcategoria, Prueba.codigo, Detalle.riesgo).join(Detalle, and_(Detalle.id_prueba==Prueba.id, Detalle.id_pentest==pentest_num))
    for i in subcategoriasDetalle:
        print(i)

    rendered = render_template('reporte_template.html',
                                pentest_info=pentest_info,
                                detalles=detalle_prueba,
                                riesgosNum=riesgosNum,
                                subcategoriasDetalle=subcategoriasDetalle,
                                pruebasDetalle=pruebasDetalle)

    pdf = pdfkit.from_string(rendered, False)
    response = make_response(pdf)
    response.headers['Content-Type'] = 'application/pdf'
    response.headers['Content-disposition'] = 'inline; filename=output.pdf'

    '''
    try:
        client = pdfcrowd.HtmlToPdfClient('santiagop', 'd375c828457614506a01a8f6312347e8')
        client.convertFileToFile(str(pentest_num) + "prueba.html", str(pentest_num) + 'reportfull.pdf')
    except pdfcrowd.Error as why:
        print(why)
    '''
    fin = time()-ini
    print("{}".format(fin))

    return response

@app.route('/dashboard')
def otro():
    #return render_template("index.1.html")
    return render_template("dashboard.html")

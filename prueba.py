#!/usr/bin/python3
# -*- encoding: utf-8 -*-

from flask import Flask, render_template, request, redirect, url_for, make_response
from flask_wtf import CSRFProtect

# SQLALCHEMY -> Base de datos
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import Column, Integer, String, DateTime, Numeric, Text, ForeignKey

# Exepciones
from werkzeug.exceptions import HTTPException

# Otros módulos
import datetime
import subprocess
import subprocess
import pdfkit
from forms import PentestForm

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://pentester:@192.168.0.18/scanlynx'
app.secret_key = "my_secret_key"

csrf = CSRFProtect(app=app)
db = SQLAlchemy(app=app)

class Pentest(db.Model):
    __tablename__ = "pentest"
    id = Column('id', Integer, primary_key=True)
    url_ip = Column('url_ip', String(80))
    fecha_ini = Column('fecha_ini', DateTime)
    fecha_fin = Column('fecha_fin', DateTime)
    riesgo_general = Column('riesgo_general', Numeric(precision=10, scale=2))

    def __init__(self, url_ip, fecha_ini):
        self.url_ip = url_ip
        self.fecha_ini = fecha_ini

class Subcategoria(db.Model):
    __tablename__ = "subcategoria"
    id = Column('id', Integer, primary_key=True)
    sub_nombre = Column('sub_nombre', String(45))

class Prueba(db.Model):
    __tablename__ = "prueba"
    id = Column('id', Integer, primary_key=True)
    codigo = Column('codigo', String(25))
    nombre = Column('nombre', String(75))
    descripcion = Column('descripcion', Text)
    impacto = Column('impacto', Text)
    id_subcategoria = Column('id_subcategoria', ForeignKey('subcategoria.id'))

class Detalle(db.Model):
    __tablename__ = "detalle"
    id = Column('id', Integer, primary_key=True)
    id_pentest = Column('id_pentest', ForeignKey('pentest.id'))
    id_prueba = Column('id_prueba', ForeignKey('prueba.id'))
    riesgo = Column('riesgo', Numeric(precision=10, scale=2))
    resultado = Column('resultado', Text)
    recomendacion = Column('recomendacion', Text)


def eliminarPentest(id_pentest):
    Pentest.query.filter(Pentest.id == id_pentest).delete()
    db.session.commit()

def crearPentest(pentest):
    db.session.add(pentest)
    db.session.commit()

@app.errorhandler(404)
def page_not_found(error):
    return render_template("404.html"), 404


@app.route('/', methods = ['GET', 'POST'])
def index():
    # Validación del formulario
    pentest_form = PentestForm(request.form)
    eleccion = list()
    if request.method == 'POST' and pentest_form.validate():
        for i in range(2,12):
            try:
                eleccion.append(request.form["name_" + str(i)])
            except HTTPException:
                pass
        objPentest = Pentest(pentest_form.url_ip.data, datetime.datetime.now())
        crearPentest(objPentest)
        return redirect("/pentest/1")
    else:
        #return render_template('nuevoPentest.html', subcat=subs, pruebas=subs_pruebas, form=pentest_form)
        return render_template('nuevoPentest.html', form=pentest_form)

def obtenerSubs(eleccion):
    subcatDict = {2:'config', 3:'ident', 4:'authn', 5:'authz', 6:'sess', 7:'inpval', 8:'err', 9:'crypst', 10:'buslogic', 11:'client'}
    resultado = ""
    for i in eleccion:
        for k,v in subcatDict.items():
            if str(k) == i:
                resultado += v + ","
    resultado = resultado[:-1]
    return resultado

@app.route("/pentest/<int:pentest_num>/subs", methods=['GET', 'POST'])
def pentest_subs(pentest_num):
    pentest_form = PentestForm(request.form)
    subs = Subcategoria.query.order_by(Subcategoria.id).all()
    subs_pruebas = Prueba.query.join(Subcategoria, Prueba.id_subcategoria == Subcategoria.id).add_columns(Subcategoria.sub_nombre, Prueba.id_subcategoria, Prueba.codigo, Prueba.nombre, Prueba.descripcion).order_by(Subcategoria.id)

    eleccion = list()
    url_aut = None
    user_aut = None
    pass_aut = None
    if request.method == 'POST':
        for i in range(2,12):
            try:
                eleccion.append(request.form["name_" + str(i)])
            except HTTPException:
                pass
        url_aut = request.form["url_ses"]
        user_aut = request.form["usuarioP"]
        pass_aut = request.form["passUsuarioP"]
        pentests = Pentest.query.add_columns(Pentest.url_ip).filter(Pentest.id==pentest_num)
        
        subElecc = obtenerSubs(eleccion)
        print("ssh root@192.168.120.30 'cd pentesting; /home/rpimpi/mpi-install/bin/mpiexec -n 6 -f machinefile python3 MAIN_PRUEBA_rpi.py --url "+pentests[0].url_ip+" --login "+url_aut+" --usuario "+user_aut+","+pass_aut+" --pruebas "+subElecc+" --id_pentest "+str(pentest_num)+"'")
        subprocess.call("ssh root@192.168.120.30 'cd pentesting; /home/rpimpi/mpi-install/bin/mpiexec -n 6 -f machinefile python3 MAIN_PRUEBA_rpi.py --url "+pentests[0].url_ip+" --login "+url_aut+" --usuario "+user_aut+","+pass_aut+" --pruebas "+subElecc+" --id_pentest "+str(pentest_num)+"'", shell=True)
        #os.system("ssh root@192.168.120.30 'cd pentesting; /home/rpimpi/mpi-install/bin/mpiexec -n 6 -f machinefile python3 MAIN_PRUEBA_rpi.py --url "+pentests[0].url_ip+" --login "+url_aut+" --usuario "+user_aut+","+pass_aut+" --pruebas "+subElecc+" --id_pentest "+str(pentest_num)+"'")
        #subprocess.call(["ssh root@192.168.120.30 'cd pentesting; /home/rpimpi/mpi-install/bin/mpiexec -n 6 -f machinefile python3 MAIN_PRUEBA_rpi.py --url "+pentests[0].url_ip+" --login "+url_aut+" --usuario "+user_aut+","+pass_aut+" --pruebas "+subElecc+" --id_pentest "+str(pentest_num)+"'"],shell=True,stderr=subprocess.STDOUT)
        return "hola"

    return render_template("eleccionSubcategorias.html", subcat=subs, pruebas=subs_pruebas, form=pentest_form)

@app.route("/pentest/<int:page_num>", methods=['GET', 'POST'])
def pentest(page_num):
    accion = None
    id_pentest = None

    if request.method == 'POST':
        try:
            tmp = request.form["accion"].split("_")
            #tmp = tmp.split("_")

            accion = tmp[0]
            id_pentest = tmp[1]
        except HTTPException:
            pass
        
        if id_pentest != None and accion == "elim":
            #eliminarPentest(id_pentest)
            pass

        elif id_pentest != None and accion == "pent":
            #return redirect("pentest_subs", pentest_num=id_pentest)
            return redirect(url_for("pentest_subs", pentest_num=id_pentest))
            #return render_template("eleccionSubcategorias.html", subcat=subs, pruebas=subs_pruebas)
        elif id_pentest != None and accion == "report":
            return redirect(url_for('report', pentest_num=id_pentest))

    pentests = Pentest.query.order_by(Pentest.id.desc()).paginate(per_page=6, page=page_num, error_out=True)
    return render_template("pentests.html", pentests=pentests)

@app.route("/pentest/<int:pentest_num>/report", methods=['GET'])
def report(pentest_num):
    # Consultas base de datos
    pentest_info = Pentest.query.add_columns(Pentest.url_ip).filter(Pentest.id==pentest_num)

    rendered = render_template('reporte_template.html', pentest_info=pentest_info)
    pdf = pdfkit.from_string(rendered, False)

    response = make_response(pdf)
    response.headers['Content-Type'] = 'application/pdf'
    response.headers['Content-disposition'] = 'inline; filename=output.pdf'

    return response

@app.route('/otro')
def otro():
    return render_template("index.1.html")

if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port=5000)

"""
@app.route('/', methods = ['GET', 'POST'])
def index():
    comment_form = forms.CommentForm(request.form)
    if request.method == 'POST' and comment_form.validate():
        print(comment_form.username.data)
        print(comment_form.email.data)
        print(comment_form.comment.data)
    return render_template('index.html', form=comment_form)
"""